/*Ћабораторна€ работа 4
—оздать иерархию классов, содержащую базовый класс, наследник базового класса
и наследник наследника базового класса (не менее трех классов разных уровней иерархии),
демонстрирующую свойства класса (инкапсул€ции, наследовани€ и полиморфизма) (использовать
л/р є3). ƒл€ этого каждый класс должен иметь хот€ бы одно закрытое поле данных, конструктор,
деструктор, открытые методы (функци€ вывода, функции доступа к закрытым пол€м данных, функции
установки новых значений полей), виртуальную функцию расчета каких-то параметров, перегруженные
операции . 
–еализовать в режиме раздельной компил€ции в трех файлах: заголовочный файл (им€1.h)
должен содержать описание иерархии классов, файл реализации (им€1.cpp) должен содержать
описание методов классов, файл приложение (им€2.cpp) должен содержать главную функцию с 
объ€влени€ми классов (хот€ бы по одному объекту каждого класса) и вызовами методов классов.
ѕродемонстрировать работу всех конструкторов классов (по умолчанию и с параметрами), 
всех функций вывода и виртуальных функций.

*/
#include "Header.h"

void area_(Cpoint &r) {
	r.area();

}

void main() {

	setlocale(LC_ALL, "Russian");

	Cpoint base_obj;
	base_obj.Show();
	Cline first_obj;
	first_obj.Show();
	Cube second_obj;
	second_obj.Show();
	Cube third_obj;
	third_obj.Show();

	Cpoint base_obj_(1,5);
	base_obj_.Show();
	Cline first_obj_(1,5,6,7);
	first_obj_.Show();
	Cube second_obj_(4, 6, 6, 4);
	second_obj_.Show();
	Cube third_obj_(1,2,10,40);
	third_obj_.Show();
	
	base_obj.PublicMethodX();


	(third_obj > second_obj).Show();

	area_(base_obj_); 
	area_(first_obj_); 
	area_(second_obj);

	
	cout << third_obj_ << endl;
	
	cout << second_obj_ << endl;


	return;
	
}